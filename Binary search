#include <iostream>

using namespace std;



int binarySearch(int array[], int x, int low, int high) {

  if (high >= low) {

    int mid = low + (high - low) / 2;



    // If found at mid, then return it

    if (array[mid] == x)

      return mid;



    // Search the left half

    if (array[mid] > x)

      return binarySearch(array, x, low, mid - 1);



    // Search the right half

    return binarySearch(array, x, mid + 1, high);

  }



  return -1;

}



int main(void) {

  int array[] = {2, 3, 4, 5, 6, 7, 8};

  int x = 3;

  int n = sizeof(array) / sizeof(array[0]);

  int result = binarySearch(array, x, 0, n - 1);

  if (result == -1)

    cout<<"Not found";

  else

    cout<<"Element is found at index ”<<result);

}
[6/24, 2:21 PM] Harshita: #include 

using namespace std;



// Merge function to merge two sorted arrays

void merge(int arr[], int left[], int leftSize, int right[], int rightSize) {

    int i = 0, j = 0, k = 0;

    while (i < leftSize && j < rightSize) {

        if (left[i] <= right[j]) {

            arr[k++] = left[i++];

        } else {

            arr[k++] = right[j++];

        }

    }

    while (i < leftSize) {

        arr[k++] = left[i++];

    }

    while (j < rightSize) {

        arr[k++] = right[j++];

    }

}



// Recursive Merge Sort function to sort the array

void recursiveMergeSort(int arr[], int left, int right) {

    if (left >= right) {

        return;

    }

    int mid = left + (right - left) / 2;

    recursiveMergeSort(arr, left, mid);

    recursiveMergeSort(arr, mid + 1, right);

    int leftArr[mid - left + 1], rightArr[right - mid];

    for (int i = 0; i <= mid - left; i++) {

        leftArr[i] = arr[left + i];

    }

    for (int i = 0; i < right - mid; i++) {

        rightArr[i] = arr[mid + 1 + i];

    }

    merge(arr, leftArr, mid - left + 1, rightArr, right - mid);

}



// Driver code to test the Recursive Merge Sort function

int main() {

    int arr[] = { 38, 27, 43, 3, 9, 82, 10 };

    int size = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array:" << endl;

    for (int i = 0; i < size; i++) {

        cout << arr[i] << " ";

    }

    cout << endl;

    recursiveMergeSort(arr, 0, size - 1);

    cout << "Sorted array:" << endl;

    for (int i = 0; i < size; i++) {

        cout << arr[i] << " ";

    }

    cout << endl;

    return 0;

}
